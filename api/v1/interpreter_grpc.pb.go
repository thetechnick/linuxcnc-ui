// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/v1/interpreter.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InterpreterServiceClient is the client API for InterpreterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterpreterServiceClient interface {
	Interpret(ctx context.Context, in *InterpreterRequest, opts ...grpc.CallOption) (*InterpreterResponse, error)
}

type interpreterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterpreterServiceClient(cc grpc.ClientConnInterface) InterpreterServiceClient {
	return &interpreterServiceClient{cc}
}

func (c *interpreterServiceClient) Interpret(ctx context.Context, in *InterpreterRequest, opts ...grpc.CallOption) (*InterpreterResponse, error) {
	out := new(InterpreterResponse)
	err := c.cc.Invoke(ctx, "/linuxcnc.api.v1.InterpreterService/Interpret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterpreterServiceServer is the server API for InterpreterService service.
// All implementations should embed UnimplementedInterpreterServiceServer
// for forward compatibility
type InterpreterServiceServer interface {
	Interpret(context.Context, *InterpreterRequest) (*InterpreterResponse, error)
}

// UnimplementedInterpreterServiceServer should be embedded to have forward compatible implementations.
type UnimplementedInterpreterServiceServer struct {
}

func (UnimplementedInterpreterServiceServer) Interpret(context.Context, *InterpreterRequest) (*InterpreterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Interpret not implemented")
}

// UnsafeInterpreterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterpreterServiceServer will
// result in compilation errors.
type UnsafeInterpreterServiceServer interface {
	mustEmbedUnimplementedInterpreterServiceServer()
}

func RegisterInterpreterServiceServer(s grpc.ServiceRegistrar, srv InterpreterServiceServer) {
	s.RegisterService(&InterpreterService_ServiceDesc, srv)
}

func _InterpreterService_Interpret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterpreterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterpreterServiceServer).Interpret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linuxcnc.api.v1.InterpreterService/Interpret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterpreterServiceServer).Interpret(ctx, req.(*InterpreterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InterpreterService_ServiceDesc is the grpc.ServiceDesc for InterpreterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InterpreterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "linuxcnc.api.v1.InterpreterService",
	HandlerType: (*InterpreterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Interpret",
			Handler:    _InterpreterService_Interpret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/interpreter.proto",
}
